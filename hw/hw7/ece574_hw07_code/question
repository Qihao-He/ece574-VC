3/31/2017
QUESTION: Should here be a MPI_Barrier be waiting for all the threads?
________________________________________________________________________________
4/3/2017
QUESTION: How to do Malloc in the file?
________________________________________________________________________________
QUESTION: What does send buffer A and receive buffer B mean? Do we have to
change the argument A and B?
________________________________________________________________________________
What is the count after the buffer, is it the amount that the send/receive
buffer have?
________________________________________________________________________________
Why is the tag in the MPI_send() having 13 in default? What does 13 means?
________________________________________________________________________________
When malloc image.pixels, how about the other malloc for new_image, sobel_x,
sobel_y?
________________________________________________________________________________
/* QUESTION: should the numtasks or rank should be used here? */
/* QUESTION: HOW TO RUN BOTH sobel_x AND sobel_y ON THE SUBSET FOR THAT RANK
WHEN THE FOR LOOP IS COUNTING USING numtasks? */
/* convolution */
for(i=0;i<numtasks-1;i++){
  sobel_data[0].old=&image;
  sobel_data[0].new=&sobel_x;
  sobel_data[0].filter=&sobel_x_filter;
  sobel_data[0].ystart=i*image.y/numtasks;
  sobel_data[0].yend=(i+1)*image.y/numtasks;
  generic_convolve((void *)&sobel_data[0]);

  sobel_data[1].old=&image;
  sobel_data[1].new=&sobel_y;
  sobel_data[1].filter=&sobel_y_filter;
  sobel_data[1].ystart=i*image.y/numtasks;
  sobel_data[1].yend=(i+1)*image.y/numtasks;
  generic_convolve((void *)&sobel_data[1]);
}
________________________________________________________________________________
/* QUESTION: Should we use numtasks or rank here? */
for(i=1;i<numtasks;i++) {
  printf("R0: Sending %d ints to %d\n",
    ARRAYSIZE,i);
  result = MPI_Send(A,/* buffer */
      ARRAYSIZE,			/* count */
      MPI_INT,				/* type */
      i,							/* destination */
      13,							/* tag */
      MPI_COMM_WORLD);
________________________________________________________________________________
/* QUESTION: WHAT IS THE DIFFERENCE OF RANK AND numtasks */
/* Get number of tasks and our process number (rank) */
MPI_Comm_size(MPI_COMM_WORLD,&numtasks);
MPI_Comm_rank(MPI_COMM_WORLD,&rank);
________________________________________________________________________________
/* QUESTION: Is this the offset of the ystart and yend? */
 if (ystart==0) ystart=1;
 if (yend==old->y) yend=old->y-1;
________________________________________________________________________________
4/5/2017
/* QUESTION: Should the MALLOC for the output be done in the all Ranks? */
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
